#!/usr/bin/env python3
"""
Demo script for the enhanced Finance Agent features
Shows how to use the 4 new features in practice
"""

import os
import sys
import json
from datetime import datetime

# Add the project root to the path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from agent.agent import FinanceAgent, AgentConfig

def demo_enhanced_features():
    """Demo the enhanced features with real examples"""
    print("üöÄ Finance Agent Enhanced Features Demo")
    print("=" * 60)
    
    # Create agent with enhanced configuration
    config = AgentConfig(
        max_loops=3,
        confidence_threshold=0.7,
        enable_llm_planning=True,
        enable_learning=True,
        enable_reflection=True
    )
    
    # Mock LLM client for demo (replace with real LLM client)
    class DemoLLMClient:
        def __init__(self):
            self.available = True
        
        def chat(self, system_prompt, user_prompt):
            if "financial research planner" in system_prompt:
                # Example 1: INDEX_SET decision
                if "SET" in user_prompt or "‡∏î‡∏±‡∏ä‡∏ô‡∏µ" in user_prompt:
                    return json.dumps({
                        "decision": "INDEX_SET",
                        "why_decision": "SET Index shows strong momentum with low volatility, suitable for medium-term investment",
                        "targets": ["^SETI"],
                        "subtasks": [
                            {"id": "fetch_data", "tool": "data.load_prices", "args": {"symbols": ["^SETI"], "period": "2y", "interval": "1d"}},
                            {"id": "features", "tool": "indicators.compute", "args": {"indicators": ["RSI", "MACD", "EMA_10", "EMA_20", "BBANDS"]}},
                            {"id": "model", "tool": "ml.train_predict", "args": {"algo": "RandomForest", "horizon_days": 20}},
                            {"id": "risk", "tool": "risk.assess", "args": {"mdd_window": "1y"}},
                            {"id": "mini_backtest", "tool": "backtest.quick", "args": {"metric": ["Sharpe", "MDD"]}},
                            {"id": "decide", "tool": "decision.summarize", "args": {}}
                        ],
                        "acceptance": {"min_sharpe": 0.0, "max_mdd_pct": 20},
                        "report_needs": ["executive_summary", "rationale_th_en", "disclaimer"]
                    })
                # Example 2: SINGLE_STOCK decision
                else:
                    return json.dumps({
                        "decision": "SINGLE_STOCK",
                        "why_decision": "Individual stock analysis shows better risk-adjusted returns for this time horizon",
                        "targets": ["PTT.BK", "KBANK.BK", "ADVANC.BK"],
                        "subtasks": [
                            {"id": "fetch_data", "tool": "data.load_prices", "args": {"symbols": ["PTT.BK"], "period": "2y"}},
                            {"id": "features", "tool": "indicators.compute", "args": {"indicators": ["RSI", "MACD", "EMA_10", "EMA_20", "BBANDS"]}},
                            {"id": "model", "tool": "ml.train_predict", "args": {"algo": "RandomForest", "horizon_days": 10}},
                            {"id": "risk", "tool": "risk.assess", "args": {"mdd_window": "1y"}},
                            {"id": "mini_backtest", "tool": "backtest.quick", "args": {"metric": ["Sharpe", "MDD"]}},
                            {"id": "decide", "tool": "decision.summarize", "args": {}}
                        ],
                        "acceptance": {"min_sharpe": 0.0, "max_mdd_pct": 15},
                        "report_needs": ["executive_summary", "rationale_th_en", "disclaimer"]
                    })
            
            elif "reflection analyst" in system_prompt:
                return json.dumps({
                    "root_causes": ["Insufficient data quality", "Model overfitting to recent trends"],
                    "suggestions": [
                        {"change": "features", "detail": "add EMA_gap, ATR, and Stochastic indicators"},
                        {"change": "horizon", "detail": "extend to 30 days for trend stability"},
                        {"change": "model", "detail": "try GradientBoosting as alternative"}
                    ],
                    "lesson": {
                        "pattern": "Sideways market + low volume conditions",
                        "trigger": "RSI in 45-55 range for >30 sessions, ATR below average",
                        "action": "Prefer INDEX_SET with mean-reversion bands; avoid breakout models",
                        "example": "SETI 2024-2025 Q2 conditions"
                    }
                })
            
            elif "financial report writer" in system_prompt:
                if "INDEX_SET" in user_prompt:
                    return json.dumps({
                        "executive_summary_th": "‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡∏±‡∏ä‡∏ô‡∏µ SET ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏Å‡∏•‡∏≤‡∏á ‡πÇ‡∏î‡∏¢‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á",
                        "executive_summary_en": "SET Index analysis shows medium-term investment opportunities with moderate risk levels",
                        "reasons_evidence_th": [
                            "‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥ 68% ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á",
                            "RSI ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö 52 ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏î‡∏∏‡∏•",
                            "MACD ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ö‡∏ß‡∏Å",
                            "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ"
                        ],
                        "risk_caveats_th": [
                            "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏ï‡∏•‡∏≤‡∏î‡∏´‡∏∏‡πâ‡∏ô‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°",
                            "‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏Å‡∏¥‡∏à‡∏°‡∏´‡∏†‡∏≤‡∏Ñ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏™‡πà‡∏á‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö",
                            "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡∏ï‡∏•‡∏≤‡∏î‡πÇ‡∏•‡∏Å"
                        ],
                        "watch_next_th": [
                            "‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏î‡∏±‡∏ä‡∏ô‡∏µ‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏Å‡∏¥‡∏à‡∏°‡∏´‡∏†‡∏≤‡∏Ñ",
                            "‡∏î‡∏π‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏à‡∏≤‡∏Å‡∏ï‡∏•‡∏≤‡∏î‡∏´‡∏∏‡πâ‡∏ô‡∏ï‡πà‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®",
                            "‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡πÉ‡∏´‡∏ç‡πà"
                        ],
                        "disclaimer_th": "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏Å‡πà‡∏≠‡∏ô‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏•‡∏á‡∏ó‡∏∏‡∏ô",
                        "investment_recommendation": "HOLD - ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏Å‡∏•‡∏≤‡∏á",
                        "confidence_level": "Medium-High (70%)",
                        "top_pick": "^SETI",
                        "alternatives": ["^SET50", "^SET100"]
                    })
                else:
                    return json.dumps({
                        "executive_summary_th": "‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏´‡∏∏‡πâ‡∏ô PTT.BK ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏™‡∏±‡πâ‡∏ô‡∏ñ‡∏∂‡∏á‡∏Å‡∏•‡∏≤‡∏á ‡πÇ‡∏î‡∏¢‡∏°‡∏µ‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô",
                        "executive_summary_en": "PTT.BK analysis shows short to medium-term investment opportunities supported by oil price factors",
                        "reasons_evidence_th": [
                            "‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥ 72% ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤",
                            "RSI ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö 48 ‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ã‡∏∑‡πâ‡∏≠",
                            "MACD ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏Å‡∏•‡∏±‡∏ö‡∏ï‡∏±‡∏ß",
                            "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡∏î‡∏¥‡∏ö‡∏°‡∏µ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô"
                        ],
                        "risk_caveats_th": [
                            "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡∏î‡∏¥‡∏ö",
                            "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡∏ï‡∏•‡∏≤‡∏î‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô",
                            "‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏Å‡∏¥‡∏à"
                        ],
                        "watch_next_th": [
                            "‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡∏î‡∏¥‡∏ö WTI ‡πÅ‡∏•‡∏∞ Brent",
                            "‡∏î‡∏π‡∏ú‡∏•‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™",
                            "‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡πÉ‡∏´‡∏°‡πà"
                        ],
                        "disclaimer_th": "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏Å‡πà‡∏≠‡∏ô‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏•‡∏á‡∏ó‡∏∏‡∏ô",
                        "investment_recommendation": "BUY - ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏™‡∏±‡πâ‡∏ô‡∏ñ‡∏∂‡∏á‡∏Å‡∏•‡∏≤‡∏á",
                        "confidence_level": "High (75%)",
                        "top_pick": "PTT.BK",
                        "alternatives": ["KBANK.BK", "ADVANC.BK"]
                    })
            
            else:
                return "Mock response"
    
    agent = FinanceAgent(config, DemoLLMClient())
    
    # Demo scenarios
    scenarios = [
        {
            "title": "üìà Scenario 1: SET Index Analysis",
            "goal": "‡∏ä‡πà‡∏ß‡∏¢‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡πÉ‡∏ô SET ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏∏‡πâ‡∏ô‡∏£‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡πÉ‡∏ô 1-3 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤",
            "context": {"budget_thb": 200000, "risk_tolerance": "medium", "time_horizon": "1-3m"}
        },
        {
            "title": "üè¢ Scenario 2: Individual Stock Analysis",
            "goal": "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏´‡∏∏‡πâ‡∏ô PTT.BK ‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏™‡∏±‡πâ‡∏ô",
            "context": {"symbol": "PTT.BK", "horizon": 10, "period": "1y", "risk_tolerance": "medium"}
        }
    ]
    
    for i, scenario in enumerate(scenarios, 1):
        print(f"\n{scenario['title']}")
        print("-" * 50)
        print(f"Goal: {scenario['goal']}")
        print(f"Context: {scenario['context']}")
        
        # Run agent
        result = agent.run(scenario['goal'], scenario['context'])
        
        # Display results
        print(f"\n‚úÖ Analysis Results:")
        print(f"   Success: {result.get('success', False)}")
        print(f"   Loops completed: {result.get('loops_completed', 0)}")
        print(f"   Execution time: {result.get('execution_time', 0):.2f} seconds")
        
        if result.get('final_report'):
            report = result['final_report']
            
            # Show plan decision
            if 'llm_explanation' in report:
                explanation = report['llm_explanation']
                print(f"\nüìä Investment Decision:")
                print(f"   Recommendation: {explanation.get('investment_recommendation', 'N/A')}")
                print(f"   Confidence: {explanation.get('confidence_level', 'N/A')}")
                
                print(f"\nüáπüá≠ Thai Summary:")
                print(f"   {explanation.get('executive_summary_th', 'N/A')}")
                
                print(f"\nüá∫üá∏ English Summary:")
                print(f"   {explanation.get('executive_summary_en', 'N/A')}")
                
                print(f"\nüìã Key Reasons:")
                for reason in explanation.get('reasons_evidence_th', []):
                    print(f"   ‚Ä¢ {reason}")
                
                print(f"\n‚ö†Ô∏è Risk Factors:")
                for risk in explanation.get('risk_caveats_th', []):
                    print(f"   ‚Ä¢ {risk}")
                
                print(f"\nüëÄ What to Watch:")
                for watch in explanation.get('watch_next_th', []):
                    print(f"   ‚Ä¢ {watch}")
                
                print(f"\nüìù Disclaimer:")
                print(f"   {explanation.get('disclaimer_th', 'N/A')}")
        
        print("\n" + "=" * 60)
    
    # Show memory statistics
    print(f"\nüíæ Memory Statistics:")
    memory_stats = agent.get_agent_status().get('memory_stats', {})
    long_term_stats = memory_stats.get('long_term', {})
    print(f"   Long-term lessons: {long_term_stats.get('lessons_count', 0)}")
    print(f"   Long-term strategies: {long_term_stats.get('strategies_count', 0)}")
    
    print(f"\nüéØ Enhanced Features Demonstrated:")
    print(f"   1. ‚úÖ LLM Planner: INDEX_SET vs SINGLE_STOCK vs NO_TRADE decisions")
    print(f"   2. ‚úÖ Agent Loop: Think-Act-Evaluate-Reflect with acceptance criteria")
    print(f"   3. ‚úÖ Reflect System: Root cause analysis and lesson learning")
    print(f"   4. ‚úÖ Report & Explain: TH/EN summaries with human-readable output")
    
    return True

if __name__ == "__main__":
    try:
        demo_enhanced_features()
    except Exception as e:
        print(f"‚ùå Demo failed: {str(e)}")
        import traceback
        traceback.print_exc()
