#!/usr/bin/env python3
"""
Quick Start Streamlit App for Finance Agent
‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô Streamlit ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Finance Agent
"""

import streamlit as st
import sys
import os

# Add current directory to path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from agent.tools import DataLoader, IndicatorCalculator

# Page config
st.set_page_config(
    page_title="Finance Agent - Quick Start",
    page_icon="üìä",
    layout="wide"
)

# Title
st.title("üìä Finance Agent - Quick Start")
st.markdown("‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏´‡∏∏‡πâ‡∏ô‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢ ‡πÜ")

# Sidebar
st.sidebar.header("‚öôÔ∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤")

# Symbol input
symbol = st.sidebar.text_input(
    "‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏´‡∏∏‡πâ‡∏ô",
    value="PTT.BK",
    help="‡∏´‡∏∏‡πâ‡∏ô‡πÑ‡∏ó‡∏¢: PTT.BK, KBANK.BK, SCB.BK\n‡∏´‡∏∏‡πâ‡∏ô‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏±‡∏ô: AAPL, MSFT, TSLA"
)

# Period selection
period = st.sidebar.selectbox(
    "‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤",
    options=["6mo", "1y", "2y"],
    index=1,
    help="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"
)

# Analysis button
analyze_button = st.sidebar.button("üîç ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå", type="primary")

# Main content
if analyze_button:
    st.header(f"üìà ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå {symbol}")
    
    # Create containers
    with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•..."):
        # Initialize tools
        loader = DataLoader()
        calc = IndicatorCalculator()
        
        # Fetch price data
        result = loader.fetch_price_data(symbol, period=period)
        
        if result.success:
            st.success(f"‚úÖ ‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {len(result.data)} ‡πÅ‡∏ñ‡∏ß")
            
            # Show metadata
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô", result.metadata['start_date'])
            with col2:
                st.metric("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î", result.metadata['end_date'])
            with col3:
                st.metric("Mock Data", "‡πÉ‡∏ä‡πà" if result.metadata.get('mock_data', False) else "‡πÑ‡∏°‡πà")
            
            # Show latest price
            latest = result.data.iloc[-1]
            st.subheader("üí∞ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")
            
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.metric("‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î", f"{latest['open']:.2f}")
            with col2:
                st.metric("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î", f"{latest['high']:.2f}")
            with col3:
                st.metric("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î", f"{latest['low']:.2f}")
            with col4:
                st.metric("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏¥‡∏î", f"{latest['close']:.2f}")
            
            # Calculate technical indicators
            with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì technical indicators..."):
                indicators_result = calc.calculate_indicators(
                    result.data,
                    indicators=['rsi', 'sma', 'macd']
                )
                
                if indicators_result.success:
                    st.success("‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì technical indicators ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                    
                    # Show latest indicators
                    latest_indicators = indicators_result.data.iloc[-1]
                    st.subheader("üìä Technical Indicators")
                    
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        rsi = latest_indicators['rsi_14']
                        if rsi > 70:
                            rsi_color = "üî¥"
                            rsi_status = "Overbought"
                        elif rsi < 30:
                            rsi_color = "üü¢"
                            rsi_status = "Oversold"
                        else:
                            rsi_color = "üü°"
                            rsi_status = "Neutral"
                        
                        st.metric(
                            f"{rsi_color} RSI(14)",
                            f"{rsi:.2f}",
                            help=f"Status: {rsi_status}"
                        )
                    
                    with col2:
                        sma = latest_indicators['sma_20']
                        price = latest['close']
                        if price > sma:
                            sma_status = "Above SMA - Bullish"
                            sma_color = "üü¢"
                        else:
                            sma_status = "Below SMA - Bearish"
                            sma_color = "üî¥"
                        
                        st.metric(
                            f"{sma_color} SMA(20)",
                            f"{sma:.2f}",
                            help=f"Status: {sma_status}"
                        )
                    
                    with col3:
                        macd = latest_indicators['macd']
                        if macd > 0:
                            macd_status = "Positive - Bullish"
                            macd_color = "üü¢"
                        else:
                            macd_status = "Negative - Bearish"
                            macd_color = "üî¥"
                        
                        st.metric(
                            f"{macd_color} MACD",
                            f"{macd:.4f}",
                            help=f"Status: {macd_status}"
                        )
                    
                    # Show price chart
                    st.subheader("üìà ‡∏Å‡∏£‡∏≤‡∏ü‡∏£‡∏≤‡∏Ñ‡∏≤")
                    st.line_chart(result.data['close'])
                    
                    # Show technical analysis summary
                    st.subheader("üéØ ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
                    
                    # RSI Analysis
                    if rsi > 70:
                        rsi_analysis = "RSI ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö Overbought (>70) - ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏Ç‡∏≤‡∏¢"
                    elif rsi < 30:
                        rsi_analysis = "RSI ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö Oversold (<30) - ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ã‡∏∑‡πâ‡∏≠"
                    else:
                        rsi_analysis = "RSI ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏õ‡∏Å‡∏ï‡∏¥ (30-70) - ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô"
                    
                    # Price vs SMA Analysis
                    if price > sma:
                        sma_analysis = f"‡∏£‡∏≤‡∏Ñ‡∏≤ ({price:.2f}) ‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏´‡∏ô‡∏∑‡∏≠ SMA(20) ({sma:.2f}) - ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì Bullish"
                    else:
                        sma_analysis = f"‡∏£‡∏≤‡∏Ñ‡∏≤ ({price:.2f}) ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ï‡πâ SMA(20) ({sma:.2f}) - ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì Bearish"
                    
                    # MACD Analysis
                    if macd > 0:
                        macd_analysis = "MACD ‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏ß‡∏Å - ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì Bullish"
                    else:
                        macd_analysis = "MACD ‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏ö - ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì Bearish"
                    
                    # Display analysis
                    st.info(f"**RSI Analysis:** {rsi_analysis}")
                    st.info(f"**Price vs SMA:** {sma_analysis}")
                    st.info(f"**MACD Analysis:** {macd_analysis}")
                    
                    # Overall recommendation
                    st.subheader("üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥")
                    
                    bullish_signals = 0
                    bearish_signals = 0
                    
                    if rsi < 30:
                        bullish_signals += 1
                    elif rsi > 70:
                        bearish_signals += 1
                    
                    if price > sma:
                        bullish_signals += 1
                    else:
                        bearish_signals += 1
                    
                    if macd > 0:
                        bullish_signals += 1
                    else:
                        bearish_signals += 1
                    
                    if bullish_signals > bearish_signals:
                        st.success("üü¢ **‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°: Bullish** - ‡∏°‡∏µ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Ç‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô")
                    elif bearish_signals > bullish_signals:
                        st.error("üî¥ **‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°: Bearish** - ‡∏°‡∏µ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Ç‡∏≤‡∏•‡∏á")
                    else:
                        st.warning("üü° **‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°: Neutral** - ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô")
                    
                else:
                    st.error(f"‚ùå ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì indicators ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {indicators_result.error}")
        else:
            st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ: {result.error}")

else:
    # Show instructions
    st.info("üëÜ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏´‡∏∏‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° '‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô")
    
    # Show examples
    st.subheader("üìù ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**‡∏´‡∏∏‡πâ‡∏ô‡πÑ‡∏ó‡∏¢:**")
        st.markdown("- PTT.BK (‡∏õ‡∏ï‡∏ó.)")
        st.markdown("- KBANK.BK (‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Å‡∏™‡∏¥‡∏Å‡∏£‡πÑ‡∏ó‡∏¢)")
        st.markdown("- SCB.BK (‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÑ‡∏ó‡∏¢‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå)")
        st.markdown("- CPALL.BK (‡∏ã‡∏µ‡∏û‡∏µ ‡∏≠‡∏≠‡∏•‡∏•‡πå)")
        st.markdown("- ADVANC.BK (‡πÄ‡∏≠‡πÑ‡∏≠‡πÄ‡∏≠‡∏™)")
        st.markdown("- TRUE.BK (‡∏ó‡∏£‡∏π ‡∏Ñ‡∏≠‡∏£‡πå‡∏õ‡∏≠‡πÄ‡∏£‡∏ä‡∏±‡πà‡∏ô)")
    
    with col2:
        st.markdown("**‡∏´‡∏∏‡πâ‡∏ô‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏±‡∏ô:**")
        st.markdown("- AAPL (Apple Inc.)")
        st.markdown("- MSFT (Microsoft Corporation)")
        st.markdown("- TSLA (Tesla Inc.)")
        st.markdown("- GOOGL (Alphabet Inc.)")
        st.markdown("- AMZN (Amazon.com Inc.)")
        st.markdown("- META (Meta Platforms Inc.)")
    
    # Show features
    st.subheader("‚ú® ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå")
    st.markdown("- üìä ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå technical indicators")
    st.markdown("- üìà ‡∏Å‡∏£‡∏≤‡∏ü‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏ö‡∏ö real-time")
    st.markdown("- üéØ ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ã‡∏∑‡πâ‡∏≠-‡∏Ç‡∏≤‡∏¢")
    st.markdown("- üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô")
    st.markdown("- üîÑ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• mock data ‡πÄ‡∏°‡∏∑‡πà‡∏≠ API ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")

# Footer
st.markdown("---")
st.markdown("**Finance Agent** - ‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏´‡∏∏‡πâ‡∏ô‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞")
st.markdown("üí° *‡πÉ‡∏ä‡πâ mock data ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö*")
