import pandas as pd
import yfinance as yf
import numpy as np
from datetime import datetime, timedelta

def fetch_stock_data(ticker, start_date="2024-01-01", end_date="2025-01-01"):
    """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏° fallback ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á"""
    
    print(f"üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {ticker}...")
    
    try:
        # ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á
        df = yf.download(ticker, start=start_date, end=end_date, interval="1d", auto_adjust=True, progress=False)
        
        if df is not None and not df.empty:
            print(f"‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {ticker} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ({len(df)} ‡∏ß‡∏±‡∏ô)")
            return df
        else:
            raise ValueError("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤")
            
    except Exception as e:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {ticker} ‡πÑ‡∏î‡πâ: {e}")
        print("üîÑ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÅ‡∏ó‡∏ô...")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á
        start = datetime.strptime(start_date, "%Y-%m-%d")
        end = datetime.strptime(end_date, "%Y-%m-%d")
        dates = pd.date_range(start=start, end=end, freq='D')
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏à‡∏£‡∏¥‡∏á
        np.random.seed(42)
        n_days = len(dates)
        
        # ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ï‡∏≤‡∏°‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå
        if "PTT" in ticker:
            initial_price = 35.0  # PTT ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 35 ‡∏ö‡∏≤‡∏ó
        elif "AAPL" in ticker:
            initial_price = 180.0  # Apple ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì $180
        else:
            initial_price = 100.0
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ trend ‡πÅ‡∏•‡∏∞ volatility
        returns = np.random.normal(0.0005, 0.02, n_days)  # 0.05% daily return, 2% volatility
        prices = [initial_price]
        
        for ret in returns[1:]:
            new_price = prices[-1] * (1 + ret)
            prices.append(max(new_price, 0.01))  # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡∏¥‡∏î‡∏•‡∏ö
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á OHLCV data
        df_sim = pd.DataFrame({
            'Open': [p * (1 + np.random.normal(0, 0.005)) for p in prices],
            'High': [p * (1 + abs(np.random.normal(0, 0.01))) for p in prices],
            'Low': [p * (1 - abs(np.random.normal(0, 0.01))) for p in prices],
            'Close': prices,
            'Volume': np.random.randint(1000000, 10000000, n_days)
        }, index=dates)
        
        # ‡∏õ‡∏£‡∏±‡∏ö High/Low ‡πÉ‡∏´‡πâ‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏•
        df_sim['High'] = df_sim[['Open', 'Close']].max(axis=1) * (1 + np.random.uniform(0, 0.02, n_days))
        df_sim['Low'] = df_sim[['Open', 'Close']].min(axis=1) * (1 - np.random.uniform(0, 0.02, n_days))
        
        print(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á {ticker} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ({len(df_sim)} ‡∏ß‡∏±‡∏ô)")
        return df_sim

# ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
ticker = "PTT.BK"
df = fetch_stock_data(ticker, "2024-01-01", "2025-01-01")

# ‡πÅ‡∏õ‡∏•‡∏á timezone ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢ (Bangkok)
try:
    df = df.tz_localize("UTC").tz_convert("Asia/Bangkok")
except:
    print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á timezone ‡πÑ‡∏î‡πâ ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥‡πÅ‡∏ó‡∏ô")

print("\nüìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 5 ‡∏ß‡∏±‡∏ô‡πÅ‡∏£‡∏Å:")
print(df.head())

print(f"\nüìà ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:")
print(f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô: {len(df)}")
print(f"‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: {float(df['Close'].iloc[0]):.2f}")
print(f"‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢: {float(df['Close'].iloc[-1]):.2f}")
print(f"‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î: {float(df['High'].max()):.2f}")
print(f"‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î: {float(df['Low'].min()):.2f}")
print(f"Volume ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: {float(df['Volume'].mean()):,.0f}")

# ‡πÄ‡∏ã‡∏ü‡πÄ‡∏õ‡πá‡∏ô CSV
filename = f"{ticker.replace('.', '_')}_daily.csv"
df.to_csv(filename, encoding="utf-8-sig")
print(f"\nüíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå: {filename}")
